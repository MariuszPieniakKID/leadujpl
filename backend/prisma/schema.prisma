// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Roles in the system
enum Role {
  ADMIN
  MANAGER
  SALES_REP
}

model Team {
  id        String   @id @default(cuid())
  name      String
  manager   User?    @relation("TeamManager", fields: [managerId], references: [id])
  managerId String?
  members   User[]   @relation("TeamMembers")
  leads     Lead[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  firstName String
  lastName  String
  phone     String?
  street            String?
  city              String?
  postalCode        String?
  houseNumber       String?
  apartmentNumber   String?
  company           String?
  industry          String?
  passwordHash      String
  role      Role
  team      Team?    @relation("TeamMembers", fields: [teamId], references: [id])
  teamId    String?
  leads     Lead[]   @relation("LeadOwner")
  meetings  Meeting[]
  managedTeams Team[] @relation("TeamManager")
  manager   User?    @relation("ManagerToSales", fields: [managerId], references: [id])
  managerId String?
  sales     User[]   @relation("ManagerToSales")
  offers    Offer[]
  attachments Attachment[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Lead {
  id          String   @id @default(cuid())
  firstName   String
  lastName    String
  phone       String?
  email       String?
  company     String?
  notes       String?
  status      String   @default("new")
  owner       User     @relation("LeadOwner", fields: [ownerId], references: [id])
  ownerId     String
  team        Team?    @relation(fields: [teamId], references: [id])
  teamId      String?
  meetings    Meeting[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  @@index([ownerId])
  @@index([teamId])
}

model Meeting {
  id          String   @id @default(cuid())
  lead        Lead?    @relation(fields: [leadId], references: [id])
  leadId      String?
  client      Client?  @relation(fields: [clientId], references: [id])
  clientId    String?
  scheduledAt DateTime
  endsAt      DateTime?
  location    String?
  notes       String?
  pvInstalled Boolean?
  billRange   String?
  extraComments String?
  status      String?  // 'Sukces', 'Pora≈ºka', 'Dogrywka'
  contactConsent Boolean @default(false)
  attendee    User     @relation(fields: [attendeeId], references: [id])
  attendeeId  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  attachments Attachment[]
  @@index([leadId])
  @@index([clientId])
  @@index([attendeeId])
}

// Clients (Klienci)
model Client {
  id           String   @id @default(cuid())
  firstName    String
  lastName     String
  phone        String?
  email        String?
  street       String?
  city         String?
  category     String?
  pvInstalled  Boolean?
  billRange    String?
  extraComments String?
  newRules     Boolean?
  buildingType String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  meetings     Meeting[]
  offers       Offer[]
  attachments  Attachment[]
  @@index([lastName])
}

// Calculator configuration (singleton)
model CalculatorConfig {
  id          String   @id
  settings    Json
  pricing     Json
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Offer {
  id         String   @id @default(cuid())
  client     Client   @relation(fields: [clientId], references: [id])
  clientId   String
  meeting    Meeting? @relation(fields: [meetingId], references: [id])
  meetingId  String?
  owner      User     @relation(fields: [ownerId], references: [id])
  ownerId    String
  fileName   String
  mimeType   String
  pdf        Bytes
  snapshot   Json
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  @@index([clientId])
  @@index([ownerId])
  @@index([meetingId])
}

model Attachment {
  id         String   @id @default(cuid())
  meeting    Meeting  @relation(fields: [meetingId], references: [id])
  meetingId  String
  client     Client   @relation(fields: [clientId], references: [id])
  clientId   String
  owner      User     @relation(fields: [ownerId], references: [id])
  ownerId    String
  fileName   String
  mimeType   String
  data       Bytes
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  @@index([meetingId])
  @@index([clientId])
  @@index([ownerId])
}
